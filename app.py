import streamlit as st
import openai
import os

openai.api_key = os.environ.get("OPENAI_API_KEY")

st.title('An√°lise de Propostas de Cr√©dito Habita√ß√£o')

if 'processo' not in st.session_state:
    st.session_state['processo'] = None
if 'situacao_atual' not in st.session_state:
    st.session_state['situacao_atual'] = None
if 'propostas' not in st.session_state:
    st.session_state['propostas'] = []
if 'mais_propostas' not in st.session_state:
    st.session_state['mais_propostas'] = True
if 'dor' not in st.session_state:
    st.session_state['dor'] = None

# 1. Perguntar tipo de processo
if not st.session_state['processo']:
    st.subheader("Tipo de processo")
    processo = st.selectbox(
        "Seleciona o tipo de processo:",
        [
            "Transfer√™ncia de cr√©dito habita√ß√£o",
            "Transfer√™ncia de cr√©dito habita√ß√£o com refor√ßo",
            "Cr√©dito novo",
            "Cr√©dito novo com refor√ßo"
        ]
    )
    if st.button("Confirmar tipo de processo"):
        st.session_state['processo'] = processo
        st.rerun()
    st.stop()

# 2. Perguntar situa√ß√£o atual se aplic√°vel
if st.session_state['processo'] == "Transfer√™ncia de cr√©dito habita√ß√£o" and not st.session_state['situacao_atual']:
    with st.form("situacao_atual"):
        st.subheader("Situa√ß√£o atual")
        financiamento = st.text_input("Valor de financiamento (‚Ç¨)")
        prazo = st.text_input("Prazo em meses")
        valor_seguros = st.text_input("Valor de seguros (‚Ç¨)")
        prestacao = st.text_input("Presta√ß√£o com seguros (‚Ç¨)")
        submeter = st.form_submit_button("Guardar situa√ß√£o atual")
    if submeter:
        st.session_state['situacao_atual'] = {
            "Valor de financiamento": financiamento,
            "Prazo em meses": prazo,
            "Valor de seguros": valor_seguros,
            "Presta√ß√£o com seguros": prestacao
        }
        st.rerun()
    st.stop()

if st.session_state['processo'] == "Transfer√™ncia de cr√©dito habita√ß√£o com refor√ßo" and not st.session_state['situacao_atual']:
    with st.form("situacao_atual"):
        st.subheader("Situa√ß√£o atual")
        financiamento = st.text_input("Valor de financiamento (‚Ç¨)")
        prazo = st.text_input("Prazo em meses")
        valor_seguros = st.text_input("Valor de seguros (‚Ç¨)")
        prestacao = st.text_input("Presta√ß√£o com seguros (‚Ç¨)")
        valor_outros_creditos = st.text_input("Valor com outros cr√©ditos (‚Ç¨)")
        prestacoes_outros_creditos = st.text_input("Presta√ß√µes com outros cr√©ditos (‚Ç¨)")
        submeter = st.form_submit_button("Guardar situa√ß√£o atual")
    if submeter:
        st.session_state['situacao_atual'] = {
            "Valor de financiamento": financiamento,
            "Prazo em meses": prazo,
            "Valor de seguros": valor_seguros,
            "Presta√ß√£o com seguros": prestacao,
            "Valor com outros cr√©ditos": valor_outros_creditos,
            "Presta√ß√µes com outros cr√©ditos": prestacoes_outros_creditos
        }
        st.rerun()
    st.stop()

# 3. Adicionar propostas
if st.session_state['mais_propostas']:
    with st.form(key="adicionar_proposta"):
        st.subheader(f"Adicionar proposta {len(st.session_state['propostas'])+1}")
        banco = st.text_input("Nome do banco", key=f"banco{len(st.session_state['propostas'])}")
        financiamento = st.text_input("Valor de financiamento (‚Ç¨)", key=f"financiamento{len(st.session_state['propostas'])}")
        prazo = st.text_input("Prazo em meses", key=f"prazo{len(st.session_state['propostas'])}")
        valor_seguros = st.text_input("Valor de seguros (‚Ç¨)", key=f"seguros{len(st.session_state['propostas'])}")

        # Proposta com refor√ßo
        if st.session_state['processo'] in [
            "Transfer√™ncia de cr√©dito habita√ß√£o com refor√ßo",
            "Cr√©dito novo com refor√ßo"
        ]:
            valor_reforco = st.text_input("Valor de refor√ßo (‚Ç¨)", key=f"reforco{len(st.session_state['propostas'])}")
            prestacao_total = st.text_input("Total de presta√ß√µes com seguros (‚Ç¨)", key=f"prestacaototal{len(st.session_state['propostas'])}")
            custos = st.text_input("Custos associados (‚Ç¨)", key=f"custos{len(st.session_state['propostas'])}")
        else:
            prestacao = st.text_input("Presta√ß√£o com seguros (‚Ç¨)", key=f"prestacao{len(st.session_state['propostas'])}")
            custos = st.text_input("Custos associados (‚Ç¨)", key=f"custos{len(st.session_state['propostas'])}")

        adicionar = st.form_submit_button("Adicionar proposta")

    if adicionar:
        if st.session_state['processo'] in [
            "Transfer√™ncia de cr√©dito habita√ß√£o com refor√ßo",
            "Cr√©dito novo com refor√ßo"
        ]:
            st.session_state['propostas'].append({
                "Nome do banco": banco,
                "Valor de financiamento": financiamento,
                "Prazo em meses": prazo,
                "Valor de refor√ßo": valor_reforco,
                "Valor de seguros": valor_seguros,
                "Total de presta√ß√µes com seguros": prestacao_total,
                "Custos associados": custos
            })
        else:
            st.session_state['propostas'].append({
                "Nome do banco": banco,
                "Valor de financiamento": financiamento,
                "Prazo em meses": prazo,
                "Valor de seguros": valor_seguros,
                "Presta√ß√£o com seguros": prestacao,
                "Custos associados": custos
            })
        st.rerun()

    if st.session_state['propostas']:
        st.markdown("#### Propostas j√° adicionadas:")
        for idx, p in enumerate(st.session_state['propostas']):
            st.write(f"Proposta {idx+1}: {p}")
        mais = st.radio(
            "Queres adicionar mais alguma proposta?",
            ("Sim", "N√£o"),
            key=f"mais_propostas_radio_{len(st.session_state['propostas'])}"
        )
        if mais == "N√£o":
            st.session_state['mais_propostas'] = False
            st.rerun()

# 4. Perguntar dor do cliente
if not st.session_state['mais_propostas'] and not st.session_state['dor']:
    st.subheader("Motivo principal do cliente")
    dor = st.selectbox(
        "Qual a principal raz√£o que levou o cliente a recorrer aos nossos servi√ßos?",
        [
            "Pre√ßo",
            "Juntar v√°rios cr√©ditos",
            "Valor mais alto de financiamento",
            "Seguros fora do banco",
            "Apenas mudar de banco",
            "Pedir valor de refor√ßo"
        ]
    )
    if st.button("Confirmar motivo principal"):
        st.session_state['dor'] = dor
        st.rerun()
    st.stop()

# 5. Montar o prompt final (DIRECIONADO AO CLIENTE!) e chamar a IA
if not st.session_state['mais_propostas'] and st.session_state['dor']:
    prompt = (
        "Escreve a resposta abaixo como se fosses um consultor de cr√©dito a falar diretamente com o cliente, "
        "de forma clara, emp√°tica e personalizada. N√£o uses linguagem t√©cnica nem estrutura de relat√≥rio. "
        "Faz um texto fluido e pr√≥ximo, pronto a ser enviado diretamente ao cliente por WhatsApp ou email. "
        "Come√ßa sempre com um cumprimento personalizado.\n\n"
        "Aqui est√£o todos os dados para a an√°lise:\n\n"
        f"Tipo de processo: {st.session_state['processo']}\n\n"
    )

    # Situa√ß√£o atual se existir
    if st.session_state['situacao_atual']:
        prompt += "Situa√ß√£o atual do cliente:\n"
        for k, v in st.session_state['situacao_atual'].items():
            prompt += f"- {k}: {v}\n"
        prompt += "\n"

    prompt += "Propostas apresentadas:\n"
    for idx, p in enumerate(st.session_state['propostas']):
        prompt += f"Proposta {idx+1}:\n"
        for k, v in p.items():
            prompt += f"- {k}: {v}\n"
        prompt += "\n"

    prompt += (
        f"Motivo principal do cliente: {st.session_state['dor']}\n\n"
        "Tua miss√£o:\n"
        "- Faz um pequeno resumo simples e personalizado de todas as propostas para o cliente.\n"
        "- Explica, de forma clara, qual a proposta mais vantajosa para o objetivo do cliente e porqu√™.\n"
        "- Se o processo for transfer√™ncia, destaca a poupan√ßa entre a presta√ß√£o com seguros da situa√ß√£o atual e as novas propostas.\n"
        "- Apresenta algumas sugest√µes de resposta para poss√≠veis d√∫vidas ou obje√ß√µes, sempre de forma positiva e esclarecedora.\n"
        '- Termina SEMPRE com este texto, sem alterar: "Fico ao dispor para qualquer esclarecimento adicional ou para avan√ßarmos com os pr√≥ximos passos. üòä"\n'
        "- Usa sempre linguagem direta, pr√≥xima, sem termos t√©cnicos nem frases de relat√≥rio.\n"
    )

    st.subheader("Prompt para IA (pr√©-visualiza√ß√£o)")
    st.code(prompt)

    if st.button("Analisar propostas com IA"):
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Responder como um gestor de cr√©dito experiente e pr√≥ximo do cliente."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1800,
            temperature=0.2
        )
        st.subheader("Texto pronto para enviar ao cliente:")
        st.write(response.choices[0].message.content)
